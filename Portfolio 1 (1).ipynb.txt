{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "from gpxutils import parse_gpx \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analysis of Cycling Data\n",
    "\n",
    "We are provided with four files containing recordings of cycling activities that include GPS location data as\n",
    "well as some measurements related to cycling performace like heart rate and power.  The goal is to perform\n",
    "some exploration and analysis of this data. \n",
    "\n",
    "The data represents four races.  Two are time trials where the rider rides alone on a set course.  Two are \n",
    "road races where the rider rides with a peleton.  All were held on the same course but the road races include\n",
    "two laps where the time trials include just one. \n",
    "\n",
    "Questions to explore with the data:\n",
    "* What is the overall distance travelled for each of the rides? What are the average speeds etc.  Provide a summary for each ride.\n",
    "* Compare the range of speeds for each ride, are time trials faster than road races? \n",
    "* Compare the speeds achieved in the two time trials (three years apart).  As well as looking at the averages, can you see where in the ride one or the other is faster.  \n",
    "* From the elevation_gain field you can see whether the rider is _climbing_ , _descending_ or on the _flat_.   Use this to calculate the average speeds in those three cases (climbing, flat or descending).  Note that _flat_ might not be zero elevation_gain but might allow for slight climbs and falls.  \n",
    "\n",
    "For time varying data like this it is often useful to _smooth_ the data using eg. a [rolling mean](https://pandas.pydata.org/pandas-docs/version/0.17.0/generated/pandas.rolling_mean.html).  You might want to experiment with smoothing in some of your analysis (not required but may be of interest)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Description of Fields\n",
    "\n",
    "* _index_ is a datetime showing the time that the observation was made (I wasn't riding at night, this is converted to UTC)\n",
    "* __latitude, longitude, elevation__ from the GPS, the position of the rider at each timepoint, elevation in m\n",
    "* __temperature__ the current ambient temperature in degrees celcius\n",
    "* __power__ the power being generated by the rider in Watts\n",
    "* __cadence__ the rotational speed of the pedals in revolutions per minute\n",
    "* __hr__ heart rate in beats per minute\n",
    "* __elevation_gain__ the change in elevation in m between two observations\n",
    "* __distance__ distance travelled between observations in km\n",
    "* __speed__ speed measured in km/h\n",
    "\n",
    "You are provided with code in [gpxutils.py](gpxutils.py) to read the GPX XML format files that are exported by cycling computers and applications.  The sample files were exported from [Strava](https://strava.com/) and represent four races by Steve Cassidy.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read the four data files\n",
    "rr_2016 = parse_gpx('Calga_RR_2016.gpx')\n",
    "tt_2016 = parse_gpx('Calga_TT_2016.gpx')\n",
    "rr_2019 = parse_gpx('Calga_RR_2019.gpx')\n",
    "tt_2019 = parse_gpx('Calga_TT_2019.gpx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>elevation</th>\n",
       "      <th>temperature</th>\n",
       "      <th>power</th>\n",
       "      <th>cadence</th>\n",
       "      <th>hr</th>\n",
       "      <th>distance</th>\n",
       "      <th>elevation_gain</th>\n",
       "      <th>speed</th>\n",
       "      <th>timedelta</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-05-14 04:02:41+00:00</th>\n",
       "      <td>-33.415561</td>\n",
       "      <td>151.222303</td>\n",
       "      <td>208.6</td>\n",
       "      <td>29.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-05-14 04:02:42+00:00</th>\n",
       "      <td>-33.415534</td>\n",
       "      <td>151.222289</td>\n",
       "      <td>208.6</td>\n",
       "      <td>29.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>0.003271</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.777020</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-05-14 04:02:46+00:00</th>\n",
       "      <td>-33.415398</td>\n",
       "      <td>151.222180</td>\n",
       "      <td>208.6</td>\n",
       "      <td>29.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>0.018194</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.375033</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-05-14 04:02:49+00:00</th>\n",
       "      <td>-33.415264</td>\n",
       "      <td>151.222077</td>\n",
       "      <td>208.6</td>\n",
       "      <td>29.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>106.0</td>\n",
       "      <td>0.017703</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.243901</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-05-14 04:02:51+00:00</th>\n",
       "      <td>-33.415160</td>\n",
       "      <td>151.222013</td>\n",
       "      <td>208.6</td>\n",
       "      <td>29.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>0.013001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.401217</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            latitude   longitude  elevation  temperature  \\\n",
       "2016-05-14 04:02:41+00:00 -33.415561  151.222303      208.6         29.0   \n",
       "2016-05-14 04:02:42+00:00 -33.415534  151.222289      208.6         29.0   \n",
       "2016-05-14 04:02:46+00:00 -33.415398  151.222180      208.6         29.0   \n",
       "2016-05-14 04:02:49+00:00 -33.415264  151.222077      208.6         29.0   \n",
       "2016-05-14 04:02:51+00:00 -33.415160  151.222013      208.6         29.0   \n",
       "\n",
       "                           power  cadence     hr  distance  elevation_gain  \\\n",
       "2016-05-14 04:02:41+00:00    0.0     40.0  102.0  0.000000             0.0   \n",
       "2016-05-14 04:02:42+00:00    0.0     40.0  102.0  0.003271             0.0   \n",
       "2016-05-14 04:02:46+00:00    0.0     40.0  103.0  0.018194             0.0   \n",
       "2016-05-14 04:02:49+00:00    0.0     55.0  106.0  0.017703             0.0   \n",
       "2016-05-14 04:02:51+00:00    0.0     61.0  109.0  0.013001             0.0   \n",
       "\n",
       "                               speed  timedelta  \n",
       "2016-05-14 04:02:41+00:00   0.000000        NaN  \n",
       "2016-05-14 04:02:42+00:00  11.777020        1.0  \n",
       "2016-05-14 04:02:46+00:00  16.375033        4.0  \n",
       "2016-05-14 04:02:49+00:00  21.243901        3.0  \n",
       "2016-05-14 04:02:51+00:00  23.401217        2.0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rr_2016.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#print a summary of the ride"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#do a sum to calculate distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The overall distance travelled in the rr_2016 race: 49.04858574628638\n",
      "The mean distance travelled in the rr_2016 race: 0.017380788712362302\n"
     ]
    }
   ],
   "source": [
    "overall_dist = rr_2016['distance'].sum()\n",
    "print('The overall distance travelled in the rr_2016 race:', overall_dist)\n",
    "\n",
    "avg_dist = rr_2016['distance'].mean()\n",
    "print('The mean distance travelled in the rr_2016 race:', avg_dist)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    2822.000000\n",
       "mean        0.017381\n",
       "std         0.015695\n",
       "min         0.000000\n",
       "25%         0.007894\n",
       "50%         0.011794\n",
       "75%         0.016899\n",
       "max         0.076283\n",
       "Name: distance, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summary_dist = rr_2016['distance'].describe()\n",
    "summary_dist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1217920dfd0>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(x='speed', y='distance', data=rr_2016, fit_reg=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The graph above describes the speed along the x axis as well as the distance travelled at that speed along the y axis.\n",
    "This shows us an positive correlation between speed and distance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\rsass\\anaconda3\\lib\\site-packages\\seaborn\\distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='speed', ylabel='Density'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#make comments ya bastard\n",
    "sns.distplot(rr_2016.speed)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above graph shows speed along the X axis and sensity along the Y axis.\n",
    "Fromt his graph we can see how oftena certain speed is achieved with the most common speed being slightly above 20 km/h."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The overall distance travelled in the rr_2016 race: 49.04858574628638\n",
      "The overall distance travelled in the tt_2016 race: 24.80288703130808\n",
      "The overall distance travelled in the rr_2019 race: 51.78913253596059\n",
      "The overall distance travelled in the tt_2019 race: 24.38014504376575\n",
      "the total distance travelled across all races is:  150.02075035732082\n"
     ]
    }
   ],
   "source": [
    "overall_dist = rr_2016['distance'].sum()\n",
    "print('The overall distance travelled in the rr_2016 race:', overall_dist)\n",
    "overall_dist = tt_2016['distance'].sum()\n",
    "print('The overall distance travelled in the tt_2016 race:', overall_dist)\n",
    "overall_dist = rr_2019['distance'].sum()\n",
    "print('The overall distance travelled in the rr_2019 race:', overall_dist)\n",
    "overall_dist = tt_2019['distance'].sum()\n",
    "print('The overall distance travelled in the tt_2019 race:', overall_dist)\n",
    "\n",
    "total_dist = rr_2016['distance'].sum() + tt_2016['distance'].sum() + rr_2019['distance'].sum() + tt_2019['distance'].sum()\n",
    "\n",
    "print('the total distance travelled across all races is: ', (total_dist))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the average speed in rr 2016:  34.93308475482947\n",
      "the average speed in rr 2019:  33.87986137188044\n",
      "the average speed in tt 2016:  33.52996304869014\n",
      "the average speed in tt 2019: 33.05782378815691\n"
     ]
    }
   ],
   "source": [
    "avg_speedrr16 = rr_2016['speed'].mean()\n",
    "print('the average speed in rr 2016: ', avg_speedrr16)\n",
    "avg_speedrr19 = rr_2019['speed'].mean()\n",
    "print('the average speed in rr 2019: ',avg_speedrr19)\n",
    "avg_speedtt16 = tt_2016['speed'].mean()\n",
    "print('the average speed in tt 2016: ',avg_speedtt16)\n",
    "avg_speedtt19 = tt_2019['speed'].mean()\n",
    "print('the average speed in tt 2019:', avg_speedtt19)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the average speed of road races is  34.40647306335495 km/r\n",
      "the average speed of time trials is  33.29389341842352 km/r\n"
     ]
    }
   ],
   "source": [
    "print('the average speed of road races is ',((avg_speedrr16 + avg_speedrr19)/2), 'km/r')\n",
    "print('the average speed of time trials is ',((avg_speedtt16 + avg_speedtt19)/2), 'km/r')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From this we can see on average, speed is higher during road races."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = [\"rr 2016\", \"rr 2019\", \"tt 2016\", \"tt 2019\"]\n",
    "y = ['speed']\n",
    "plt.bar(x, y,)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'float' object has no attribute 'plot'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-30-7dfd4d27e986>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mavg_speedrr16\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m: 'float' object has no attribute 'plot'"
     ]
    }
   ],
   "source": [
    "avg_speedrr16.plot.hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Challenge: Gear Usage\n",
    "\n",
    "A modern race bike has up to 22 different gears with two chainrings on the front (attached to the pedals) and 10 or 11 at the back (attached to the wheel).   The ratio of the number of teeth on the front and rear cogs determines the distance travelled with one revolution of the pedals (often called __development__, measured in metres).  Low development is good for climbing hills while high development is for going fast downhill or in the final sprint. \n",
    "\n",
    "We have a measure of the number of rotations of the pedals per minute (__cadence__) and a measure of __speed__.  Using these two variables we should be able to derive a measure of __development__ which would effectivly tell us which gear the rider was using at the time.   Development will normally range between __2m__ and __10m__.  Due to errors in GPS and cadence measurements you will see many points outside this range and you should just discard them as outliers. \n",
    "\n",
    "Write code to calculate __development__ in _meters_ for each row in a ride.  Plot the result in a _histogram_ and compare the plots for the four rides.   Comment on what you observe in the histograms.\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
